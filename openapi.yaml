openapi: 3.0.3
info:
  title: Wordle API
  version: 1.0.0
  description: Production-ready CRUD API for Wordle game with simple header-based authentication.

servers:
  - url: http://localhost:3000/api

components:
  securitySchemes:
    SimpleAuth:
      type: apiKey
      in: header
      name: x-username
      description: Username for authentication (use with x-authcode)
    SimpleAuthCode:
      type: apiKey
      in: header
      name: x-authcode
      description: Authcode for authentication (use with x-username)
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        authcode:
          type: string
      required: [id, username, authcode]
    Wordle:
      type: object
      properties:
        id:
          type: string
        word:
          type: string
        max_guesses:
          type: integer
        created_at:
          type: string
          format: date-time
        creator_id:
          type: string
      required: [id, word, max_guesses, created_at, creator_id]
    Guess:
      type: object
      properties:
        id:
          type: string
        word:
          type: string
        created_at:
          type: string
          format: date-time
        user_id:
          type: string
        wordle_id:
          type: string
      required: [id, word, created_at, user_id, wordle_id]

security:
  - SimpleAuth: []
    SimpleAuthCode: []

paths:
  /user:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, authcode]
              properties:
                username:
                  type: string
                authcode:
                  type: string
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
    get:
      summary: List all users
      security:
        - SimpleAuth: []
          SimpleAuthCode: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  /user/{id}:
    get:
      summary: Get user by ID
      security:
        - SimpleAuth: []
          SimpleAuthCode: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '401':
          description: Unauthorized
    put:
      summary: Update user by ID
      security:
        - SimpleAuth: []
          SimpleAuthCode: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                authcode:
                  type: string
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
    delete:
      summary: Delete user by ID
      security:
        - SimpleAuth: []
          SimpleAuthCode: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: ''
          content: {}
        '401':
          description: Unauthorized

  /wordle:
    get:
      summary: List all wordles for authenticated user
      security:
        - SimpleAuth: []
          SimpleAuthCode: []
      responses:
        '200':
          description: List of wordles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wordle'
        '401':
          description: Unauthorized
    post:
      summary: Create a new wordle for authenticated user
      security:
        - SimpleAuth: []
          SimpleAuthCode: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [word, max_guesses]
              properties:
                word:
                  type: string
                max_guesses:
                  type: integer
      responses:
        '201':
          description: Wordle created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wordle'
        '401':
          description: Unauthorized

  /wordle/{id}:
    get:
      summary: Get a wordle by ID (only if owned)
      security:
        - SimpleAuth: []
          SimpleAuthCode: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Wordle found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wordle'
        '404':
          description: Not found or not owned
        '401':
          description: Unauthorized
    put:
      summary: Update a wordle by ID (only if owned)
      security:
        - SimpleAuth: []
          SimpleAuthCode: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                word:
                  type: string
                max_guesses:
                  type: integer
      responses:
        '200':
          description: Wordle updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wordle'
        '404':
          description: Not found or not owned
        '401':
          description: Unauthorized
    delete:
      summary: Delete a wordle by ID (only if owned)
      security:
        - SimpleAuth: []
          SimpleAuthCode: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: ''
          content: {}
        '404':
          description: Not found or not owned
        '401':
          description: Unauthorized

  /guess:
    get:
      summary: List all guesses for authenticated user
      security:
        - SimpleAuth: []
          SimpleAuthCode: []
      responses:
        '200':
          description: List of guesses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Guess'
        '401':
          description: Unauthorized
    post:
      summary: Create a new guess for authenticated user
      security:
        - SimpleAuth: []
          SimpleAuthCode: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [word, wordle_id]
              properties:
                word:
                  type: string
                wordle_id:
                  type: string
      responses:
        '201':
          description: Guess created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Guess'
        '401':
          description: Unauthorized

  /guess/{id}:
    get:
      summary: Get a guess by ID (only if owned)
      security:
        - SimpleAuth: []
          SimpleAuthCode: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Guess found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Guess'
        '404':
          description: Not found or not owned
        '401':
          description: Unauthorized
    put:
      summary: Update a guess by ID (only if owned)
      security:
        - SimpleAuth: []
          SimpleAuthCode: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                word:
                  type: string
      responses:
        '200':
          description: Guess updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Guess'
        '404':
          description: Not found or not owned
        '401':
          description: Unauthorized
    delete:
      summary: Delete a guess by ID (only if owned)
      security:
        - SimpleAuth: []
          SimpleAuthCode: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: ''
          content: {}
        '404':
          description: Not found or not owned
        '401':
          description: Unauthorized 